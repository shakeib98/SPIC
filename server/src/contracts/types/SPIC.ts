/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SPICInterface extends utils.Interface {
  contractName: "SPIC";
  functions: {
    "RELAYER()": FunctionFragment;
    "VERIFIER_IDENTITY()": FunctionFragment;
    "VERIFIER_VOTE()": FunctionFragment;
    "addContributors(uint256,address[])": FunctionFragment;
    "becomeVoter(uint256,uint256,uint256)": FunctionFragment;
    "castVoteExternal(address,uint256,uint256,uint256,uint256[8])": FunctionFragment;
    "contributors(uint256,address)": FunctionFragment;
    "createCircle(uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "getDepth(uint256)": FunctionFragment;
    "getNumberOfLeaves(uint256)": FunctionFragment;
    "getRoot(uint256)": FunctionFragment;
    "groups(uint256)": FunctionFragment;
    "nftToAddress(address)": FunctionFragment;
    "polls(uint256)": FunctionFragment;
    "receiveCompensation(uint256)": FunctionFragment;
    "votersGroup(uint256)": FunctionFragment;
    "withdrawNFT(uint256,uint256,uint256,address,uint256[8])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "RELAYER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_IDENTITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addContributors",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "becomeVoter",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteExternal",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCircle",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfLeaves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "groups",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftToAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "receiveCompensation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votersGroup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "RELAYER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_IDENTITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "becomeVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDepth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "groups", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votersGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;

  events: {
    "CircleCreated(uint256,uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "CompensationReceived(address,uint256,uint256)": EventFragment;
    "ContributorAdded(address,uint256)": EventFragment;
    "NFTWithdrawn(address,uint256)": EventFragment;
    "VoteCasted(uint256,uint256,address,uint8)": EventFragment;
    "VoterAdded(address,uint256,uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CircleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompensationReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCasted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterAdded"): EventFragment;
}

export type CircleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  {
    _id: BigNumber;
    _matchAmount: BigNumber;
    _startEpoch: BigNumber;
    _endEpoch: BigNumber;
    voterIncentive: BigNumber;
    erc20Address: string;
    erc721Addres: string;
  }
>;

export type CircleCreatedEventFilter = TypedEventFilter<CircleCreatedEvent>;

export type CompensationReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _contributor: string; _id: BigNumber; _amount: BigNumber }
>;

export type CompensationReceivedEventFilter =
  TypedEventFilter<CompensationReceivedEvent>;

export type ContributorAddedEvent = TypedEvent<
  [string, BigNumber],
  { _contributor: string; _id: BigNumber }
>;

export type ContributorAddedEventFilter =
  TypedEventFilter<ContributorAddedEvent>;

export type NFTWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { user: string; nftId: BigNumber }
>;

export type NFTWithdrawnEventFilter = TypedEventFilter<NFTWithdrawnEvent>;

export type VoteCastedEvent = TypedEvent<
  [BigNumber, BigNumber, string, number],
  {
    pollId: BigNumber;
    votingCommitment: BigNumber;
    pkContributor: string;
    index: number;
  }
>;

export type VoteCastedEventFilter = TypedEventFilter<VoteCastedEvent>;

export type VoterAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number],
  {
    user: string;
    id: BigNumber;
    identityCommitment: BigNumber;
    _tokenId: BigNumber;
    index: number;
  }
>;

export type VoterAddedEventFilter = TypedEventFilter<VoterAddedEvent>;

export interface SPIC extends BaseContract {
  contractName: "SPIC";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SPICInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RELAYER(overrides?: CallOverrides): Promise<[string]>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<[string]>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<[string]>;

    addContributors(
      _id: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    becomeVoter(
      _id: BigNumberish,
      identityCommitment: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteExternal(
      pk: string,
      mRootIc: BigNumberish,
      votingCommitment: BigNumberish,
      _pollId: BigNumberish,
      proofIc: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributors(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { voteCount: number; status: boolean }>;

    createCircle(
      _id: BigNumberish,
      _matchAmount: BigNumberish,
      voterIncentive: BigNumberish,
      erc20Address: string,
      erc721Address: string,
      _endEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    groups(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    nftToAddress(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number,
        number
      ] & {
        matchAmount: BigNumber;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        voterIncentive: BigNumber;
        coordinator: string;
        erc20Address: string;
        erc721Address: string;
        votesIndex: number;
        voterIndex: number;
      }
    >;

    receiveCompensation(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votersGroup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    withdrawNFT(
      votingCommitment: BigNumberish,
      mRootVc: BigNumberish,
      pollId: BigNumberish,
      pkContributor: string,
      proofVc: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  RELAYER(overrides?: CallOverrides): Promise<string>;

  VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<string>;

  VERIFIER_VOTE(overrides?: CallOverrides): Promise<string>;

  addContributors(
    _id: BigNumberish,
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  becomeVoter(
    _id: BigNumberish,
    identityCommitment: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteExternal(
    pk: string,
    mRootIc: BigNumberish,
    votingCommitment: BigNumberish,
    _pollId: BigNumberish,
    proofIc: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributors(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { voteCount: number; status: boolean }>;

  createCircle(
    _id: BigNumberish,
    _matchAmount: BigNumberish,
    voterIncentive: BigNumberish,
    erc20Address: string,
    erc721Address: string,
    _endEpoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDepth(groupId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getNumberOfLeaves(
    groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoot(
    groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  groups(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      depth: number;
      root: BigNumber;
      numberOfLeaves: BigNumber;
    }
  >;

  nftToAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  polls(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      number,
      number
    ] & {
      matchAmount: BigNumber;
      startEpoch: BigNumber;
      endEpoch: BigNumber;
      voterIncentive: BigNumber;
      coordinator: string;
      erc20Address: string;
      erc721Address: string;
      votesIndex: number;
      voterIndex: number;
    }
  >;

  receiveCompensation(
    pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votersGroup(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      depth: number;
      root: BigNumber;
      numberOfLeaves: BigNumber;
    }
  >;

  withdrawNFT(
    votingCommitment: BigNumberish,
    mRootVc: BigNumberish,
    pollId: BigNumberish,
    pkContributor: string,
    proofVc: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RELAYER(overrides?: CallOverrides): Promise<string>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<string>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<string>;

    addContributors(
      _id: BigNumberish,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    becomeVoter(
      _id: BigNumberish,
      identityCommitment: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteExternal(
      pk: string,
      mRootIc: BigNumberish,
      votingCommitment: BigNumberish,
      _pollId: BigNumberish,
      proofIc: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    contributors(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { voteCount: number; status: boolean }>;

    createCircle(
      _id: BigNumberish,
      _matchAmount: BigNumberish,
      voterIncentive: BigNumberish,
      erc20Address: string,
      erc721Address: string,
      _endEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepth(groupId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    groups(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    nftToAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number,
        number
      ] & {
        matchAmount: BigNumber;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        voterIncentive: BigNumber;
        coordinator: string;
        erc20Address: string;
        erc721Address: string;
        votesIndex: number;
        voterIndex: number;
      }
    >;

    receiveCompensation(
      pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    votersGroup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    withdrawNFT(
      votingCommitment: BigNumberish,
      mRootVc: BigNumberish,
      pollId: BigNumberish,
      pkContributor: string,
      proofVc: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CircleCreated(uint256,uint256,uint256,uint256,uint256,address,address)"(
      _id?: null,
      _matchAmount?: null,
      _startEpoch?: null,
      _endEpoch?: null,
      voterIncentive?: null,
      erc20Address?: null,
      erc721Addres?: null
    ): CircleCreatedEventFilter;
    CircleCreated(
      _id?: null,
      _matchAmount?: null,
      _startEpoch?: null,
      _endEpoch?: null,
      voterIncentive?: null,
      erc20Address?: null,
      erc721Addres?: null
    ): CircleCreatedEventFilter;

    "CompensationReceived(address,uint256,uint256)"(
      _contributor?: null,
      _id?: null,
      _amount?: null
    ): CompensationReceivedEventFilter;
    CompensationReceived(
      _contributor?: null,
      _id?: null,
      _amount?: null
    ): CompensationReceivedEventFilter;

    "ContributorAdded(address,uint256)"(
      _contributor?: null,
      _id?: null
    ): ContributorAddedEventFilter;
    ContributorAdded(
      _contributor?: null,
      _id?: null
    ): ContributorAddedEventFilter;

    "NFTWithdrawn(address,uint256)"(
      user?: null,
      nftId?: null
    ): NFTWithdrawnEventFilter;
    NFTWithdrawn(user?: null, nftId?: null): NFTWithdrawnEventFilter;

    "VoteCasted(uint256,uint256,address,uint8)"(
      pollId?: null,
      votingCommitment?: null,
      pkContributor?: null,
      index?: null
    ): VoteCastedEventFilter;
    VoteCasted(
      pollId?: null,
      votingCommitment?: null,
      pkContributor?: null,
      index?: null
    ): VoteCastedEventFilter;

    "VoterAdded(address,uint256,uint256,uint256,uint8)"(
      user?: null,
      id?: null,
      identityCommitment?: null,
      _tokenId?: null,
      index?: null
    ): VoterAddedEventFilter;
    VoterAdded(
      user?: null,
      id?: null,
      identityCommitment?: null,
      _tokenId?: null,
      index?: null
    ): VoterAddedEventFilter;
  };

  estimateGas: {
    RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    addContributors(
      _id: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    becomeVoter(
      _id: BigNumberish,
      identityCommitment: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteExternal(
      pk: string,
      mRootIc: BigNumberish,
      votingCommitment: BigNumberish,
      _pollId: BigNumberish,
      proofIc: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributors(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCircle(
      _id: BigNumberish,
      _matchAmount: BigNumberish,
      voterIncentive: BigNumberish,
      erc20Address: string,
      erc721Address: string,
      _endEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    groups(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nftToAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    receiveCompensation(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votersGroup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawNFT(
      votingCommitment: BigNumberish,
      mRootVc: BigNumberish,
      pollId: BigNumberish,
      pkContributor: string,
      proofVc: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RELAYER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addContributors(
      _id: BigNumberish,
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    becomeVoter(
      _id: BigNumberish,
      identityCommitment: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteExternal(
      pk: string,
      mRootIc: BigNumberish,
      votingCommitment: BigNumberish,
      _pollId: BigNumberish,
      proofIc: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributors(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCircle(
      _id: BigNumberish,
      _matchAmount: BigNumberish,
      voterIncentive: BigNumberish,
      erc20Address: string,
      erc721Address: string,
      _endEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    groups(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveCompensation(
      pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votersGroup(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      votingCommitment: BigNumberish,
      mRootVc: BigNumberish,
      pollId: BigNumberish,
      pkContributor: string,
      proofVc: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

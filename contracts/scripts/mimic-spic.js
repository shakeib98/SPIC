// // import { expect, use } from "chai";
// const ethers = require('ethers');
// // import { deployContract } from "ethereum-waffle";

// // import * as ERC20Artifact from "../artifacts/contracts/base/ERC20Mock.sol/MockERC20.json"
// // import * as ERC721Artifact from "../artifacts/contracts/base/ERC721Mock.sol/MockERC721.json"
// // import * as VerifierICArtifact from "../artifacts/contracts/verifier/verifierIc.sol/VerifierIC.json"
// // import * as VerifierVCArtifact from "../artifacts/contracts/verifier/verifierVc.sol/VerifierVC.json"

// const { groth16 } = require("snarkjs");

// // import { Contract, ContractFactory, BigNumber } from "ethers";
// // import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";

// const buildPoseidon = require("circomlibjs").buildPoseidon;
// const { poseidonContract } = require("circomlibjs");

// // import { MerkleTree } from "../test/utils/merkleTree";

// // import { PoseidonHasher } from "../test/utils/poseidonHasher";

// // import * as path from 'path'

// const fs = require('fs')

// const PRIVATE_KEY = "0x46b0de683444db4966a09f7ef67f622496a2904f7b0b8c9ea1884177c5cfe2d0"

// async function deploySPIC() {
//     const PoseidonLibFactory = await (await getPoseidonFactory(2)).deploy()

//     await PoseidonLibFactory.deployed()
  
//     const IncrementalBinaryTreeLibFactory = await ethers.getContractFactory("IncrementalBinaryTree", {
//       libraries: {
//         PoseidonT3: PoseidonLibFactory.address
//       }
//     })

//     console.log(IncrementalBinaryTreeLibFactory)
//     // const incrementalBinaryTreeLib = await IncrementalBinaryTreeLibFactory.deploy()
  
//     // await incrementalBinaryTreeLib.deployed()

//     // const provider = new ethers.providers.JsonRpcProvider('https://api.s0.ps.hmny.io/')


//     // const wallet = new ethers.Wallet(PRIVATE_KEY, provider)

//     // // Read the contract artifact, which was generated by Remix
//     // const metadata = JSON.parse(fs.readFileSync('./media/shakeib98/SPIC/contracts/artifacts/contracts/SPIC.sol/SPIC.json').toString())

//     // // Deploy the contract
//     // const factory = new ethers.ContractFactory(metadata.abi, metadata.data.bytecode.object, wallet)

//     // const contract = await factory.deploy("ERC20", "ERC721", "RELAYER", 50)
//     // await contract.deployed()
//     // console.log(`Deployment successful! Contract Address: ${contract.address}`)
// }


// async function deployERC20() {

//     const provider = new ethers.providers.JsonRpcProvider('https://api.s0.ps.hmny.io/')


//     const wallet = new ethers.Wallet(PRIVATE_KEY, provider)

//     // Read the contract artifact, which was generated by Remix
//     const metadata = JSON.parse(fs.readFileSync('./media/shakeib98/SPIC/contracts/artifacts/contracts/base/ERC20Mock.sol/MockERC20.json').toString())

//     // Deploy the contract
//     const factory = new ethers.ContractFactory(metadata.abi, metadata.data.bytecode.object, wallet)
//     const contract = await factory.deploy("ERC20", "ERC721", "RELAYER", 50)
//     await contract.deployed()
//     console.log(`Deployment successful! Contract Address: ${contract.address}`)
// }

// async function deploy721() {

//     const provider = new ethers.providers.JsonRpcProvider('https://api.s0.ps.hmny.io/')


//     const wallet = new ethers.Wallet(PRIVATE_KEY, provider)

//     // Read the contract artifact, which was generated by Remix
//     const metadata = JSON.parse(fs.readFileSync('./media/shakeib98/SPIC/contracts/artifacts/contracts/base/ERC721Mock.sol/MockERC721.json').toString())

//     // Deploy the contract
//     const factory = new ethers.ContractFactory(metadata.abi, metadata.data.bytecode.object, wallet)
//     const contract = await factory.deploy("ERC20", "ERC721", "RELAYER", 50)
//     await contract.deployed()
//     console.log(`Deployment successful! Contract Address: ${contract.address}`)
// }

// // async function deployVerifier() {

// //     const provider = new ethers.providers.JsonRpcProvider('https://api.s0.ps.hmny.io/')


// //     const wallet = new ethers.Wallet(PRIVATE_KEY, provider)

// //     // Read the contract artifact, which was generated by Remix
// //     const metadataOne = JSON.parse(fs.readFileSync('./media/shakeib98/SPIC/contracts/artifacts/contracts/verifier/verifierVC.sol/VerifierVC.json').toString())

// //     const metadataSecond = JSON.parse(fs.readFileSync('./media/shakeib98/SPIC/contracts/artifacts/contracts/verifier/verifierVC.sol/VerifierVC.json').toString())

// //     // Deploy the contract
// //     const factory = new ethers.ContractFactory(metadataOne.abi, metadataOne.data.bytecode.object, wallet)
// //     const factory2 = new ethers.ContractFactory(metadataSecond.abi, metadataSecond.data.bytecode.object, wallet)

// //     const contract = await factory.deploy()
// //     const contract2 = await factory2.deploy()
// //     await contract.deployed()
// //     await contract2.deployed()

// //     console.log(contract.address, contract2.address)
// // }

// const getPoseidonFactory = async (nInputs) => {
//     const bytecode = poseidonContract.createCode(nInputs);
//     const abiJson = poseidonContract.generateABI(nInputs);
//     const abi = new ethers.utils.Interface(abiJson);
//     const provider = new ethers.providers.JsonRpcProvider('https://api.s0.ps.hmny.io/')
//     const wallet = new ethers.Wallet(PRIVATE_KEY, provider)
//     return new ethers.ContractFactory(abi, bytecode,wallet);
//   };

// deploySPIC()
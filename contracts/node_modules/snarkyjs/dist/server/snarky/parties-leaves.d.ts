import { Field, Bool, Group } from '../snarky';
import * as Json from './gen/parties-json';
export { PublicKey, Field, Bool, AuthRequired, UInt64, UInt32, Sign, TokenId };
export { convertEventsToJson, convertEventsToFields, convertStringWithHashToJson, convertStringWithHashToFields, };
export { toJson, toJsonLeafTypes, toFields, toFieldsLeafTypes };
declare type UInt64 = {
    value: Field;
    _type?: 'UInt64';
};
declare type UInt32 = {
    value: Field;
    _type?: 'UInt32';
};
declare type Sign = Field;
declare type PublicKey = {
    g: Group;
};
declare type AuthRequired = {
    constant: Bool;
    signatureNecessary: Bool;
    signatureSufficient: Bool;
};
declare type TokenId = Field;
declare type TypeMap = {
    PublicKey: PublicKey;
    Field: Field;
    Bool: Bool;
    AuthRequired: AuthRequired;
    UInt32: UInt32;
    UInt64: UInt64;
    Sign: Sign;
    TokenId: TokenId;
    number: number;
    null: null;
    undefined: undefined;
    string: string;
};
declare type ToJsonTypeMap = TypeMap & {
    BlockTimeInterval: {
        lower: UInt64;
        upper: UInt64;
    };
};
declare function toJson<K extends keyof ToJsonTypeMap>(typeName: K, value: ToJsonTypeMap[K]): Json.TypeMap[K];
declare function toFields<K extends keyof TypeMap>(typeName: K, value: TypeMap[K]): Field[];
declare let toJsonLeafTypes: Set<string>;
declare let toFieldsLeafTypes: Set<string>;
declare type DataAsHash<T> = {
    data: T;
    hash: Field;
};
declare function convertEventsToJson({ data }: DataAsHash<Field[][]>): string[][];
declare function convertEventsToFields({ hash }: DataAsHash<Field[][]>): Field[];
declare function convertStringWithHashToJson({ data }: DataAsHash<string>): string;
declare function convertStringWithHashToFields({ hash }: DataAsHash<string>): Field[];

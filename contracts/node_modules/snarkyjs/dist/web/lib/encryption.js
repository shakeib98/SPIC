import { Poseidon, Group, Scalar, Circuit } from '../snarky';
export { encrypt, decrypt };
class Sponge {
    constructor() {
        this.sponge = Poseidon.spongeCreate()();
    }
    absorb(x) {
        // console.log(this.sponge, x);
        Poseidon.spongeAbsorb(this.sponge, x);
    }
    squeeze() {
        return Poseidon.spongeSqueeze(this.sponge);
    }
}
Poseidon.Sponge = Sponge;
function encrypt(message, otherPublicKey) {
    // key exchange
    let privateKey = Circuit.inCheckedComputation()
        ? Circuit.witness(Scalar, () => Scalar.random())
        : Scalar.random();
    let publicKey = Group.generator.scale(privateKey);
    let sharedSecret = otherPublicKey.g.scale(privateKey);
    let sponge = new Poseidon.Sponge();
    sponge.absorb(sharedSecret.x); // don't think we need y, that's enough entropy
    // encryption
    let cipherText = [];
    for (let i = 0; i < message.length; i++) {
        let keyStream = sponge.squeeze();
        let encryptedChunk = message[i].add(keyStream);
        cipherText.push(encryptedChunk);
        // absorb for the auth tag (two at a time for saving permutations)
        if (i % 2 === 1)
            sponge.absorb(cipherText[i - 1]);
        if (i % 2 === 1 || i === message.length - 1)
            sponge.absorb(cipherText[i]);
    }
    // authentication tag
    let authenticationTag = sponge.squeeze();
    cipherText.push(authenticationTag);
    return { publicKey, cipherText };
}
function decrypt({ publicKey, cipherText }, privateKey) {
    // key exchange
    let sharedSecret = publicKey.scale(privateKey.s);
    let sponge = new Poseidon.Sponge();
    sponge.absorb(sharedSecret.x);
    let authenticationTag = cipherText.pop();
    // decryption
    let message = [];
    for (let i = 0; i < cipherText.length; i++) {
        let keyStream = sponge.squeeze();
        let messageChunk = cipherText[i].sub(keyStream);
        message.push(messageChunk);
        if (i % 2 === 1)
            sponge.absorb(cipherText[i - 1]);
        if (i % 2 === 1 || i === cipherText.length - 1)
            sponge.absorb(cipherText[i]);
    }
    // authentication tag
    sponge.squeeze().assertEquals(authenticationTag);
    return message;
}

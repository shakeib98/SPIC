import { Party } from './party';
export { mainContext, withContext, withContextAsync, getContext, inProver, inCompile, inCheckedComputation, };
declare let mainContext: {
    witnesses?: unknown[] | undefined;
    self: Party;
    expectedAccesses: number | undefined;
    actualAccesses: number;
    inProver?: boolean | undefined;
    inCompile?: boolean | undefined;
} | undefined;
declare type PartialContext = {
    witnesses?: unknown[];
    self: Party;
    expectedAccesses?: number;
    actualAccesses?: number;
    inProver?: boolean;
    inCompile?: boolean;
};
declare function withContext<T>({ witnesses, expectedAccesses, actualAccesses, self, ...other }: PartialContext, f: () => T): [Party, T];
declare function withContextAsync<T>({ witnesses, expectedAccesses, actualAccesses, self, ...other }: PartialContext, f: () => Promise<T>): Promise<[Party, T]>;
declare function getContext(): {
    witnesses?: unknown[] | undefined;
    self: Party;
    expectedAccesses: number | undefined;
    actualAccesses: number;
    inProver?: boolean | undefined;
    inCompile?: boolean | undefined;
};
declare function inProver(): boolean;
declare function inCompile(): boolean;
declare function inCheckedComputation(): boolean;

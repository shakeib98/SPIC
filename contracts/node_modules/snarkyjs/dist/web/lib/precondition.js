import { Circuit, Bool, Field, jsLayout, } from '../snarky';
import { circuitValueEquals } from './circuit_value';
import * as Mina from './mina';
import { Preconditions } from './party';
import * as GlobalContext from './global-context';
import { UInt32, UInt64 } from './int';
export { preconditions, Account, Network, assertPreconditionInvariants, cleanPreconditionsCache, };
function preconditions(party, isSelf) {
    initializePreconditions(party, isSelf);
    return { account: Account(party), network: Network(party) };
}
// note: please keep the two precondition implementations separate
// so we can add customized fields easily
function Network(party) {
    // TODO there should be a less error-prone way of typing js layout
    // e.g. separate keys list and value object, so that we can access by key
    let layout = jsLayout.Party.layout[0].value.layout[9].value.layout[0]
        .value;
    let context = getPreconditionContextExn(party);
    return preconditionClass(layout, 'network', party, context);
}
function Account(party) {
    // TODO there should be a less error-prone way of typing js layout
    // e.g. separate keys list and value object, so that we can access by key
    let layout = jsLayout.Party.layout[0].value.layout[9].value.layout[1]
        .value;
    let context = getPreconditionContextExn(party);
    return preconditionClass(layout, 'account', party, context);
}
let unimplementedPreconditions = [
    // these are all unimplemented because we can't parse the hash yet
    'account.receiptChainHash',
    'network.snarkedLedgerHash',
    'network.nextEpochData.ledger.hash',
    'network.nextEpochData.seed',
    'network.nextEpochData.startCheckpoint',
    'network.nextEpochData.lockCheckpoint',
    'network.stakingEpochData.ledger.hash',
    'network.stakingEpochData.seed',
    'network.stakingEpochData.startCheckpoint',
    'network.stakingEpochData.lockCheckpoint',
    // this is unimplemented because the field is missing on the account endpoint
    'account.provedState',
    // this is partially unimplemented because the field is not returned by the local blockchain
    'account.delegate',
    // this is unimplemented because setting this precondition made the integration test fail
    'network.timestamp',
];
function preconditionClass(layout, baseKey, party, context) {
    if (layout.type === 'option') {
        // range condition
        if (layout.optionType === 'implicit' && layout.inner.type === 'object') {
            let lower = layout.inner.layout[0].value.type;
            let baseType = baseMap[lower];
            return {
                ...preconditionSubclass(party, baseKey, baseType, context),
                assertBetween(lower, upper) {
                    context.constrained.add(baseKey);
                    let property = getPath(party.body.preconditions, baseKey);
                    property.lower = lower;
                    property.upper = upper;
                },
            };
        }
        // value condition
        else if (layout.optionType === 'flaggedOption') {
            let baseType = baseMap[layout.inner.type];
            return preconditionSubclass(party, baseKey, baseType, context);
        }
        else if (layout.inner.type !== 'object') {
            let baseType = baseMap[layout.inner.type];
            return preconditionSubclass(party, baseKey, baseType, context);
        }
    }
    else if (layout.type === 'array') {
        return {}; // not applicable yet, TODO if we implement state
    }
    else if (layout.type === 'object') {
        // for each field, create a recursive object
        return Object.fromEntries(layout.layout.map(({ key, value }) => {
            return [
                key,
                preconditionClass(value, `${baseKey}.${key}`, party, context),
            ];
        }));
    }
    else
        throw Error('bug');
}
function preconditionSubclass(party, longKey, fieldType, context) {
    return {
        get() {
            if (unimplementedPreconditions.includes(longKey)) {
                let self = context.isSelf ? 'this' : 'party';
                throw Error(`${self}.${longKey}.get() is not implemented yet.`);
            }
            let { read, vars } = context;
            read.add(longKey);
            return (vars[longKey] ??
                (vars[longKey] = getVariable(party, longKey, fieldType)));
        },
        assertEquals(value) {
            context.constrained.add(longKey);
            let property = getPath(party.body.preconditions, longKey);
            if ('isSome' in property) {
                property.isSome = Bool(true);
                property.value = value;
            }
            else if ('lower' in property) {
                property.lower = value;
                property.upper = value;
            }
            else {
                setPath(party.body.preconditions, longKey, value);
            }
        },
        assertNothing() {
            context.constrained.add(longKey);
        },
    };
}
function getVariable(party, longKey, fieldType) {
    // in compile, just return an empty variable
    if (GlobalContext.inCompile()) {
        return Circuit.witness(fieldType, () => {
            throw Error(`This error is thrown because you are reading out the value of a variable, when that value is not known.
To write a correct circuit, you must avoid any dependency on the concrete value of variables.`);
        });
    }
    // if not in compile, get the variable's value first
    let [accountOrNetwork, ...rest] = longKey.split('.');
    let key = rest.join('.');
    let value;
    if (accountOrNetwork === 'account') {
        let address = party.body.publicKey;
        let account = Mina.getAccount(address);
        value = account[key];
        if (value === undefined)
            throw Error(`Could not get \`${key}\` on account with public key ${address.toBase58()}. The property may not be available on this account.`);
    }
    else if (accountOrNetwork === 'network') {
        let networkState = Mina.getNetworkState();
        value = getPath(networkState, key);
    }
    else {
        throw Error('impossible');
    }
    // in prover, return a new variable which holds the value
    // outside, just return the value
    if (GlobalContext.inProver()) {
        return Circuit.witness(fieldType, () => value);
    }
    else {
        return value;
    }
}
function initializePreconditions(party, isSelf) {
    preconditionContexts.set(party, {
        read: new Set(),
        constrained: new Set(),
        vars: {},
        isSelf,
    });
}
function cleanPreconditionsCache(party) {
    let context = preconditionContexts.get(party);
    if (context !== undefined)
        context.vars = {};
}
function assertPreconditionInvariants(party) {
    let context = getPreconditionContextExn(party);
    let self = context.isSelf ? 'this' : 'party';
    let dummyPreconditions = Preconditions.ignoreAll();
    for (let preconditionPath of context.read) {
        // check if every precondition that was read was also contrained
        if (context.constrained.has(preconditionPath))
            continue;
        // check if the precondition was modified manually, which is also a valid way of avoiding an error
        let precondition = getPath(party.body.preconditions, preconditionPath);
        let dummy = getPath(dummyPreconditions, preconditionPath);
        if (!circuitValueEquals(precondition, dummy))
            continue;
        // we accessed a precondition field but not constrained it explicitly - throw an error
        let hasAssertBetween = isRangeCondition(precondition);
        let shortPath = preconditionPath.split('.').pop();
        let errorMessage = `You used \`${self}.${preconditionPath}.get()\` without adding a precondition that links it to the actual ${shortPath}.
Consider adding this line to your code:
${self}.${preconditionPath}.assertEquals(${self}.${preconditionPath}.get());${hasAssertBetween
            ? `
You can also add more flexible preconditions with \`${self}.${preconditionPath}.assertBetween(...)\`.`
            : ''}`;
        throw Error(errorMessage);
    }
}
function getPreconditionContextExn(party) {
    let c = preconditionContexts.get(party);
    if (c === undefined)
        throw Error('bug: precondition context not found');
    return c;
}
const preconditionContexts = new WeakMap();
let baseMap = { UInt64, UInt32, Field, Bool };
function isRangeCondition(condition) {
    return 'lower' in condition;
}
// helper. getPath({a: {b: 'x'}}, 'a.b') === 'x'
// TODO: would be awesome to type this
function getPath(obj, path) {
    let pathArray = path.split('.').reverse();
    while (pathArray.length > 0) {
        let key = pathArray.pop();
        obj = obj[key];
    }
    return obj;
}
function setPath(obj, path, value) {
    let pathArray = path.split('.');
    let key = pathArray.pop();
    getPath(obj, pathArray.join('.'))[key] = value;
}

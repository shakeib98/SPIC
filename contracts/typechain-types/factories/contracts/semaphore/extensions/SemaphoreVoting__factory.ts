/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SemaphoreVoting,
  SemaphoreVotingInterface,
} from "../../../../contracts/semaphore/extensions/SemaphoreVoting";

const _abi = [
  {
    inputs: [],
    name: "VERIFIER_IDENTITY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERIFIER_VOTE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
    ],
    name: "getDepth",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
    ],
    name: "getNumberOfLeaves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
    ],
    name: "getRoot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "groups",
    outputs: [
      {
        internalType: "uint8",
        name: "depth",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberOfLeaves",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "polls",
    outputs: [
      {
        internalType: "uint256",
        name: "matchAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startEpoch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endEpoch",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "coordinator",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "activeContributorsCount",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "votersGroup",
    outputs: [
      {
        internalType: "uint8",
        name: "depth",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numberOfLeaves",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405273c71e5bb4515e9520c9dad91423738394f104eecd600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ee2d932bb05e10a710944e94d8aa58c2873ab173600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156100ba57600080fd5b50610598806100ca6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac2f00741161005b578063ac2f00741461013e578063b9c78c2b14610172578063eed5506d146101a2578063f3094f54146101c057610088565b806325e606a31461008d57806375e618c9146100ab57806396324bd4146100db5780639b24b3b01461010d575b600080fd5b6100956101f2565b6040516100a291906103fe565b60405180910390f35b6100c560048036038101906100c091906103a8565b610218565b6040516100d291906104b0565b60405180910390f35b6100f560048036038101906100f091906103a8565b610244565b604051610104939291906104cb565b60405180910390f35b610127600480360381019061012291906103a8565b61027b565b604051610135929190610434565b60405180910390f35b610158600480360381019061015391906103a8565b6102b4565b60405161016995949392919061045d565b60405180910390f35b61018c600480360381019061018791906103a8565b610317565b6040516101999190610419565b60405180910390f35b6101aa610336565b6040516101b791906103fe565b60405180910390f35b6101da60048036038101906101d591906103a8565b61035c565b6040516101e9939291906104cb565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154905083565b60008060008084815260200190815260200160002060010154600160008581526020019081526020016000206001015491509150915091565b60066020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900460ff16905085565b6000806000838152602001908152602001600020600201549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154905083565b6000813590506103a28161054b565b92915050565b6000602082840312156103ba57600080fd5b60006103c884828501610393565b91505092915050565b6103da81610502565b82525050565b6103e981610534565b82525050565b6103f88161053e565b82525050565b600060208201905061041360008301846103d1565b92915050565b600060208201905061042e60008301846103e0565b92915050565b600060408201905061044960008301856103e0565b61045660208301846103e0565b9392505050565b600060a08201905061047260008301886103e0565b61047f60208301876103e0565b61048c60408301866103e0565b61049960608301856103d1565b6104a660808301846103ef565b9695505050505050565b60006020820190506104c560008301846103ef565b92915050565b60006060820190506104e060008301866103ef565b6104ed60208301856103e0565b6104fa60408301846103e0565b949350505050565b600061050d82610514565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b61055481610534565b811461055f57600080fd5b5056fea2646970667358221220f6a0e594860e1ced782a98fe63e430d548bc5ea1f478cb4a692d642e704b5abd64736f6c63430008040033";

type SemaphoreVotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SemaphoreVotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SemaphoreVoting__factory extends ContractFactory {
  constructor(...args: SemaphoreVotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SemaphoreVoting> {
    return super.deploy(overrides || {}) as Promise<SemaphoreVoting>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SemaphoreVoting {
    return super.attach(address) as SemaphoreVoting;
  }
  override connect(signer: Signer): SemaphoreVoting__factory {
    return super.connect(signer) as SemaphoreVoting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SemaphoreVotingInterface {
    return new utils.Interface(_abi) as SemaphoreVotingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SemaphoreVoting {
    return new Contract(address, _abi, signerOrProvider) as SemaphoreVoting;
  }
}

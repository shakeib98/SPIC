/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SPICFactoryInterface extends utils.Interface {
  functions: {
    "deploySPIC(address,address,address,address,uint256)": FunctionFragment;
    "getLength()": FunctionFragment;
    "spicData(address)": FunctionFragment;
    "spicRegistery(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploySPIC"
      | "getLength"
      | "spicData"
      | "spicRegistery"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploySPIC",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getLength", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spicData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spicRegistery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "deploySPIC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spicData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spicRegistery",
    data: BytesLike
  ): Result;

  events: {
    "SPICCreated(address,address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SPICCreated"): EventFragment;
}

export interface SPICCreatedEventObject {
  _mockToken: string;
  _nftToken: string;
  _owner: string;
  _relayer: string;
  _votersIncentive: BigNumber;
}
export type SPICCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  SPICCreatedEventObject
>;

export type SPICCreatedEventFilter = TypedEventFilter<SPICCreatedEvent>;

export interface SPICFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SPICFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploySPIC(
      _mockToken: PromiseOrValue<string>,
      _nftToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _votersIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    spicData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    spicRegistery(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  deploySPIC(
    _mockToken: PromiseOrValue<string>,
    _nftToken: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _votersIncentive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLength(overrides?: CallOverrides): Promise<BigNumber>;

  spicData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  spicRegistery(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    deploySPIC(
      _mockToken: PromiseOrValue<string>,
      _nftToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _votersIncentive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    spicData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    spicRegistery(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "SPICCreated(address,address,address,address,uint256)"(
      _mockToken?: null,
      _nftToken?: null,
      _owner?: null,
      _relayer?: null,
      _votersIncentive?: null
    ): SPICCreatedEventFilter;
    SPICCreated(
      _mockToken?: null,
      _nftToken?: null,
      _owner?: null,
      _relayer?: null,
      _votersIncentive?: null
    ): SPICCreatedEventFilter;
  };

  estimateGas: {
    deploySPIC(
      _mockToken: PromiseOrValue<string>,
      _nftToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _votersIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    spicData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spicRegistery(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploySPIC(
      _mockToken: PromiseOrValue<string>,
      _nftToken: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _votersIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spicData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spicRegistery(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

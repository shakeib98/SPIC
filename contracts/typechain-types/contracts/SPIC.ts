/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SPICInterface extends utils.Interface {
  functions: {
    "MAX_LEAVES()": FunctionFragment;
    "OWNER()": FunctionFragment;
    "RELAYER()": FunctionFragment;
    "VERIFIER_IDENTITY()": FunctionFragment;
    "VERIFIER_VOTE()": FunctionFragment;
    "addContributors(uint256,address[])": FunctionFragment;
    "becomeVoter(uint256,uint256,uint256)": FunctionFragment;
    "castVoteExternal(address,uint256,uint256,uint256,uint256[8])": FunctionFragment;
    "contributors(uint256,address)": FunctionFragment;
    "createCircle(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getDepth(uint256)": FunctionFragment;
    "getNumberOfLeaves(uint256)": FunctionFragment;
    "getRoot(uint256)": FunctionFragment;
    "groups(uint256)": FunctionFragment;
    "mockToken()": FunctionFragment;
    "nftToken()": FunctionFragment;
    "polls(uint256)": FunctionFragment;
    "receiveCompensation(uint256)": FunctionFragment;
    "voterIndex()": FunctionFragment;
    "votersGroup(uint256)": FunctionFragment;
    "votersIncentive()": FunctionFragment;
    "votesIndex()": FunctionFragment;
    "withdrawNFT(uint256,uint256,uint256,uint256,address,address,uint256[8])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_LEAVES"
      | "OWNER"
      | "RELAYER"
      | "VERIFIER_IDENTITY"
      | "VERIFIER_VOTE"
      | "addContributors"
      | "becomeVoter"
      | "castVoteExternal"
      | "contributors"
      | "createCircle"
      | "getDepth"
      | "getNumberOfLeaves"
      | "getRoot"
      | "groups"
      | "mockToken"
      | "nftToken"
      | "polls"
      | "receiveCompensation"
      | "voterIndex"
      | "votersGroup"
      | "votersIncentive"
      | "votesIndex"
      | "withdrawNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_LEAVES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(functionFragment: "RELAYER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_IDENTITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addContributors",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "becomeVoter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteExternal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCircle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfLeaves",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoot",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "groups",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "mockToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "polls",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveCompensation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voterIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votersGroup",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votersIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votesIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_LEAVES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RELAYER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_IDENTITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "becomeVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDepth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "groups", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mockToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votersGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votersIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votesIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;

  events: {
    "CircleCreated(uint256,uint256,uint256,uint256)": EventFragment;
    "CompensationReceived(address,uint256,uint256)": EventFragment;
    "ContributorAdded(address,uint256)": EventFragment;
    "NFTWithdrawn(address,uint256)": EventFragment;
    "VoteCasted(uint256,uint256,address,uint8)": EventFragment;
    "VoterAdded(address,uint256,uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CircleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompensationReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCasted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterAdded"): EventFragment;
}

export interface CircleCreatedEventObject {
  _id: BigNumber;
  _matchAmount: BigNumber;
  _startEpoch: BigNumber;
  _endEpoch: BigNumber;
}
export type CircleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  CircleCreatedEventObject
>;

export type CircleCreatedEventFilter = TypedEventFilter<CircleCreatedEvent>;

export interface CompensationReceivedEventObject {
  _contributor: string;
  _id: BigNumber;
  _amount: BigNumber;
}
export type CompensationReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CompensationReceivedEventObject
>;

export type CompensationReceivedEventFilter =
  TypedEventFilter<CompensationReceivedEvent>;

export interface ContributorAddedEventObject {
  _contributor: string;
  _id: BigNumber;
}
export type ContributorAddedEvent = TypedEvent<
  [string, BigNumber],
  ContributorAddedEventObject
>;

export type ContributorAddedEventFilter =
  TypedEventFilter<ContributorAddedEvent>;

export interface NFTWithdrawnEventObject {
  user: string;
  nftId: BigNumber;
}
export type NFTWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  NFTWithdrawnEventObject
>;

export type NFTWithdrawnEventFilter = TypedEventFilter<NFTWithdrawnEvent>;

export interface VoteCastedEventObject {
  pollId: BigNumber;
  votingCommitment: BigNumber;
  pkContributor: string;
  index: number;
}
export type VoteCastedEvent = TypedEvent<
  [BigNumber, BigNumber, string, number],
  VoteCastedEventObject
>;

export type VoteCastedEventFilter = TypedEventFilter<VoteCastedEvent>;

export interface VoterAddedEventObject {
  user: string;
  id: BigNumber;
  identityCommitment: BigNumber;
  _tokenId: BigNumber;
  index: number;
}
export type VoterAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number],
  VoterAddedEventObject
>;

export type VoterAddedEventFilter = TypedEventFilter<VoterAddedEvent>;

export interface SPIC extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SPICInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_LEAVES(overrides?: CallOverrides): Promise<[number]>;

    OWNER(overrides?: CallOverrides): Promise<[string]>;

    RELAYER(overrides?: CallOverrides): Promise<[string]>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<[string]>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<[string]>;

    addContributors(
      _id: PromiseOrValue<BigNumberish>,
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    becomeVoter(
      _id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVoteExternal(
      pk: PromiseOrValue<string>,
      mRootIc: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      _pollId: PromiseOrValue<BigNumberish>,
      proofIc: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { voteCount: number; status: boolean }>;

    createCircle(
      _id: PromiseOrValue<BigNumberish>,
      _matchAmount: PromiseOrValue<BigNumberish>,
      _startEpoch: PromiseOrValue<BigNumberish>,
      _endEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getNumberOfLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    groups(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    mockToken(overrides?: CallOverrides): Promise<[string]>;

    nftToken(overrides?: CallOverrides): Promise<[string]>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        matchAmount: BigNumber;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        coordinator: string;
        activeContributorsCount: number;
      }
    >;

    receiveCompensation(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voterIndex(overrides?: CallOverrides): Promise<[number]>;

    votersGroup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    votersIncentive(overrides?: CallOverrides): Promise<[BigNumber]>;

    votesIndex(overrides?: CallOverrides): Promise<[number]>;

    withdrawNFT(
      nftId: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      mRootVc: PromiseOrValue<BigNumberish>,
      pollId: PromiseOrValue<BigNumberish>,
      pkContributor: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      proofVc: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_LEAVES(overrides?: CallOverrides): Promise<number>;

  OWNER(overrides?: CallOverrides): Promise<string>;

  RELAYER(overrides?: CallOverrides): Promise<string>;

  VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<string>;

  VERIFIER_VOTE(overrides?: CallOverrides): Promise<string>;

  addContributors(
    _id: PromiseOrValue<BigNumberish>,
    _addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  becomeVoter(
    _id: PromiseOrValue<BigNumberish>,
    identityCommitment: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVoteExternal(
    pk: PromiseOrValue<string>,
    mRootIc: PromiseOrValue<BigNumberish>,
    votingCommitment: PromiseOrValue<BigNumberish>,
    _pollId: PromiseOrValue<BigNumberish>,
    proofIc: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributors(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { voteCount: number; status: boolean }>;

  createCircle(
    _id: PromiseOrValue<BigNumberish>,
    _matchAmount: PromiseOrValue<BigNumberish>,
    _startEpoch: PromiseOrValue<BigNumberish>,
    _endEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDepth(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getNumberOfLeaves(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoot(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  groups(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      depth: number;
      root: BigNumber;
      numberOfLeaves: BigNumber;
    }
  >;

  mockToken(overrides?: CallOverrides): Promise<string>;

  nftToken(overrides?: CallOverrides): Promise<string>;

  polls(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number] & {
      matchAmount: BigNumber;
      startEpoch: BigNumber;
      endEpoch: BigNumber;
      coordinator: string;
      activeContributorsCount: number;
    }
  >;

  receiveCompensation(
    pollId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voterIndex(overrides?: CallOverrides): Promise<number>;

  votersGroup(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      depth: number;
      root: BigNumber;
      numberOfLeaves: BigNumber;
    }
  >;

  votersIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  votesIndex(overrides?: CallOverrides): Promise<number>;

  withdrawNFT(
    nftId: PromiseOrValue<BigNumberish>,
    votingCommitment: PromiseOrValue<BigNumberish>,
    mRootVc: PromiseOrValue<BigNumberish>,
    pollId: PromiseOrValue<BigNumberish>,
    pkContributor: PromiseOrValue<string>,
    nftAddress: PromiseOrValue<string>,
    proofVc: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_LEAVES(overrides?: CallOverrides): Promise<number>;

    OWNER(overrides?: CallOverrides): Promise<string>;

    RELAYER(overrides?: CallOverrides): Promise<string>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<string>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<string>;

    addContributors(
      _id: PromiseOrValue<BigNumberish>,
      _addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    becomeVoter(
      _id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteExternal(
      pk: PromiseOrValue<string>,
      mRootIc: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      _pollId: PromiseOrValue<BigNumberish>,
      proofIc: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { voteCount: number; status: boolean }>;

    createCircle(
      _id: PromiseOrValue<BigNumberish>,
      _matchAmount: PromiseOrValue<BigNumberish>,
      _startEpoch: PromiseOrValue<BigNumberish>,
      _endEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getNumberOfLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    groups(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    mockToken(overrides?: CallOverrides): Promise<string>;

    nftToken(overrides?: CallOverrides): Promise<string>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        matchAmount: BigNumber;
        startEpoch: BigNumber;
        endEpoch: BigNumber;
        coordinator: string;
        activeContributorsCount: number;
      }
    >;

    receiveCompensation(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voterIndex(overrides?: CallOverrides): Promise<number>;

    votersGroup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        depth: number;
        root: BigNumber;
        numberOfLeaves: BigNumber;
      }
    >;

    votersIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    votesIndex(overrides?: CallOverrides): Promise<number>;

    withdrawNFT(
      nftId: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      mRootVc: PromiseOrValue<BigNumberish>,
      pollId: PromiseOrValue<BigNumberish>,
      pkContributor: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      proofVc: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CircleCreated(uint256,uint256,uint256,uint256)"(
      _id?: null,
      _matchAmount?: null,
      _startEpoch?: null,
      _endEpoch?: null
    ): CircleCreatedEventFilter;
    CircleCreated(
      _id?: null,
      _matchAmount?: null,
      _startEpoch?: null,
      _endEpoch?: null
    ): CircleCreatedEventFilter;

    "CompensationReceived(address,uint256,uint256)"(
      _contributor?: null,
      _id?: null,
      _amount?: null
    ): CompensationReceivedEventFilter;
    CompensationReceived(
      _contributor?: null,
      _id?: null,
      _amount?: null
    ): CompensationReceivedEventFilter;

    "ContributorAdded(address,uint256)"(
      _contributor?: null,
      _id?: null
    ): ContributorAddedEventFilter;
    ContributorAdded(
      _contributor?: null,
      _id?: null
    ): ContributorAddedEventFilter;

    "NFTWithdrawn(address,uint256)"(
      user?: null,
      nftId?: null
    ): NFTWithdrawnEventFilter;
    NFTWithdrawn(user?: null, nftId?: null): NFTWithdrawnEventFilter;

    "VoteCasted(uint256,uint256,address,uint8)"(
      pollId?: null,
      votingCommitment?: null,
      pkContributor?: null,
      index?: null
    ): VoteCastedEventFilter;
    VoteCasted(
      pollId?: null,
      votingCommitment?: null,
      pkContributor?: null,
      index?: null
    ): VoteCastedEventFilter;

    "VoterAdded(address,uint256,uint256,uint256,uint8)"(
      user?: null,
      id?: null,
      identityCommitment?: null,
      _tokenId?: null,
      index?: null
    ): VoterAddedEventFilter;
    VoterAdded(
      user?: null,
      id?: null,
      identityCommitment?: null,
      _tokenId?: null,
      index?: null
    ): VoterAddedEventFilter;
  };

  estimateGas: {
    MAX_LEAVES(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    addContributors(
      _id: PromiseOrValue<BigNumberish>,
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    becomeVoter(
      _id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVoteExternal(
      pk: PromiseOrValue<string>,
      mRootIc: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      _pollId: PromiseOrValue<BigNumberish>,
      proofIc: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCircle(
      _id: PromiseOrValue<BigNumberish>,
      _matchAmount: PromiseOrValue<BigNumberish>,
      _startEpoch: PromiseOrValue<BigNumberish>,
      _endEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    groups(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockToken(overrides?: CallOverrides): Promise<BigNumber>;

    nftToken(overrides?: CallOverrides): Promise<BigNumber>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveCompensation(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voterIndex(overrides?: CallOverrides): Promise<BigNumber>;

    votersGroup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votersIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    votesIndex(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawNFT(
      nftId: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      mRootVc: PromiseOrValue<BigNumberish>,
      pollId: PromiseOrValue<BigNumberish>,
      pkContributor: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      proofVc: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_LEAVES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RELAYER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFIER_IDENTITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFIER_VOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addContributors(
      _id: PromiseOrValue<BigNumberish>,
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    becomeVoter(
      _id: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVoteExternal(
      pk: PromiseOrValue<string>,
      mRootIc: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      _pollId: PromiseOrValue<BigNumberish>,
      proofIc: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributors(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCircle(
      _id: PromiseOrValue<BigNumberish>,
      _matchAmount: PromiseOrValue<BigNumberish>,
      _startEpoch: PromiseOrValue<BigNumberish>,
      _endEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    groups(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveCompensation(
      pollId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voterIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votersGroup(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votersIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votesIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawNFT(
      nftId: PromiseOrValue<BigNumberish>,
      votingCommitment: PromiseOrValue<BigNumberish>,
      mRootVc: PromiseOrValue<BigNumberish>,
      pollId: PromiseOrValue<BigNumberish>,
      pkContributor: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      proofVc: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
